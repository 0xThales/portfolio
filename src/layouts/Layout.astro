---
import Contact from "../components/atoms/Contact.astro";
import Toast from "../components/atoms/Toast.astro";
import Footer from "../components/Footer.astro";
import Slider from "../components/Slider.astro";
import "../styles/global.css";
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/x-icon" href={`${import.meta.env.BASE_URL}favicon.ico`} />
		<link rel="icon" type="image/png" sizes="32x32" href={`${import.meta.env.BASE_URL}favicon-32x32.png`} />
		<link rel="icon" type="image/png" sizes="16x16" href={`${import.meta.env.BASE_URL}favicon-16x16.png`} />
		<meta name="generator" content={Astro.generator} />
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=DM+Sans:ital,opsz,wght@0,9..40,100..1000;1,9..40,100..1000&family=Epilogue:ital,wght@0,100..900;1,100..900&family=VT323&display=swap" rel="stylesheet">
		<title>Daniel Jimenez</title>
	</head>
	<body class="cursor-(--cursor-custom) selection:bg-primary-red selection:text-primary-white">
		<main id="main-frame" class="bg-primary-black h-screen w-screen flex items-center justify-center transition-all duration-200 p-6">
			<div id="main-frame-content" class="bg-primary-white rounded-3xl w-full h-full relative">
				<slot />
				<Slider />
				<Contact />
				<Footer />
				<Toast />
			</div>
		</main>
	</body>
</html>

<script>
	importÂ {isMaximized, pageIndex, sectionCount, gameOn} from '../store.ts'
	const mainFrame = document.getElementById('main-frame') 
	const mainFrameContent = document.getElementById('main-frame-content')
	isMaximized.subscribe(value => {
		mainFrame?.classList.toggle('p-6', !value)
		mainFrameContent?.classList.toggle('rounded-3xl', !value)
	})

	document.addEventListener('keydown', (e) => {
		const keys = {
			'f': () => isMaximized.set(!isMaximized.get()),
			'Escape': () => {
				if(isMaximized.get()) {
					isMaximized.set(false)
					return
				}
				if(gameOn.get()) gameOn.set(false)
			},
			'ArrowRight':  () => {
				if(pageIndex.get() < sectionCount.get() - 1) pageIndex.set(pageIndex.get() + 1)
				if(gameOn.get()) gameOn.set(false)
			},
			'ArrowLeft':  () => {
				if(pageIndex.get() > 0) pageIndex.set(pageIndex.get() + -1)
				if(gameOn.get()) gameOn.set(false)
			}
		}

		const {key} = e
		if(!(key in keys)) return
		keys[key as keyof typeof keys]()
	})
</script>