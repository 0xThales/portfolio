---
import Divider from "./atoms/Divider.astro";
import Button from "./atoms/Button.astro";
import { ArrowLeft, ArrowRight, Maximize, Minimize } from "@lucide/astro";
---

<div id="slider" class="border bg-primary-white border-primary-grey max-sm:px-3 max-sm:py-2 px-5 py-4 max-sm:rounded-2xl rounded-3xl flex items-center justify-between absolute max-sm:top-6 sm:bottom-10 left-1/2 -translate-x-1/2 z-10 max-sm:w-[calc(100vw-96px)] w-[500px] shadow-lg">
    <div class="flex items-center max-sm:gap-2 gap-3">
        <Button id="slider-button-left" icon={ArrowLeft} size={14} />
        <div class="flex items-center max-sm:gap-2 gap-3">
             <div id="dots-container" class="flex items-center max-sm:gap-1 gap-2">
            </div>
        </div>
        <Button id="slider-button-right" icon={ArrowRight} size={14} />
    </div>
    <Divider />
    <div class="flex items-center max-sm:gap-2 gap-3">
        <Button id="maximize-button" class="expand-button" icon={Maximize} size={14} />
        <Button id="minimize-button" class="expand-button" icon={Minimize} size={14} />
        <span class="text-secondary-grey inline-flex max-sm:text-body-xs text-body-s max-sm:w-[4ch] w-[4ch] text-right tabular-nums whitespace-nowrap flex-shrink-0">
            <span><span id="current-page-index"></span>
            <span>/</span>
            <span id="current-max-index"></span>
        </span>
    </span>
    </div>
</div>

<script>
    import { isMaximized, sectionCount } from '../store.js';
    import { pageIndex } from '../store.js';

    // Slider buttons logic
    const sliderButtonLeft = document.getElementById('slider-button-left')
    const sliderButtonRight = document.getElementById('slider-button-right')
    const currentPageIndex = document.getElementById('current-page-index')
    const currentMaxIndex = document.getElementById('current-max-index')
    const doctsContainer = document.getElementById('dots-container')

    // Function to create a dot element
    function createDot(index: number) {
        const dot = document.createElement('button')
        dot.id = String(index)
        dot.className = 'dot rounded-full max-sm:w-1.5 max-sm:h-1.5 w-3 h-3 data-[selected="true"]:bg-primary-black bg-secondary-grey'
        dot.setAttribute('data-selected', 'false')
        return dot
    }

    // Add dots to the dots container
    sectionCount.subscribe(value => {
        if(!doctsContainer) return
        
        // Clear existing dots
        doctsContainer.innerHTML = ''
        
        // Create new dots
        for(let i = 0; i < value; i++) {
            const dot = createDot(i)
            dot.addEventListener('click', () => {
                pageIndex.set(i)
            })
            doctsContainer.appendChild(dot)
        }
        
        if(currentMaxIndex) currentMaxIndex.textContent = `${value}`
        
        // Update dots selection for current page
        updateDotsSelection()
    })

    // Function to update dots selection
    function updateDotsSelection() {
        const dots = document.querySelectorAll('.dot')
        dots.forEach(dot => {
            dot.setAttribute('data-selected', `${dot.id === pageIndex.get().toString()}`)
        })
    }

    pageIndex.subscribe(value => {
        if(currentPageIndex) currentPageIndex.textContent = `${value + 1}`
        updateDotsSelection()

        if(pageIndex.get() === 0) sliderButtonLeft?.setAttribute('disabled', 'true')
        else sliderButtonLeft?.removeAttribute('disabled')

        if(pageIndex.get() === sectionCount.get() - 1) sliderButtonRight?.setAttribute('disabled', 'true')
        else sliderButtonRight?.removeAttribute('disabled')
    })


    sliderButtonLeft?.addEventListener('click', () => {
        pageIndex.set(pageIndex.get() - 1)
    })
    sliderButtonRight?.addEventListener('click', () => {
        pageIndex.set(pageIndex.get() + 1)
    })

    // Expand buttons logic
    const maximizeButton = document.getElementById('maximize-button')
    const minimizeButton = document.getElementById('minimize-button')
    const expandButtons = document.querySelectorAll('.expand-button')
    

    const toggleMaximize = () => {
        isMaximized.set(!isMaximized.get())
    }

    isMaximized.subscribe(value => {
        maximizeButton?.classList.toggle("hidden", value)
        minimizeButton?.classList.toggle("hidden", !value)
    })
            
    expandButtons.forEach(button => {
        button.addEventListener('click', toggleMaximize)
    })
    

</script>